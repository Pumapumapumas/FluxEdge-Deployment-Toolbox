---
# environment_template.yml Playbook
# This playbook calls roles as necessary to configure the packages and dependencies
# necessary to create a template container environment for the Open Source Deployment framework.
# to run locally: ANSIBLE_CONFIG="/mnt/data/FluxEdge-Deployment-Toolbox/ansible/ansible.cfg" ansible-playbook /mnt/data/FluxEdge-Deployment-Toolbox/ansible/playbooks/environment_template.yml -i localhost, -c local 
# to run locally with debug: ANSIBLE_CONFIG="/mnt/data/FluxEdge-Deployment-Toolbox/ansible/ansible.cfg" ansible-playbook /mnt/data/FluxEdge-Deployment-Toolbox/ansible/playbooks/environment_template.yml -i localhost, -c local -vv


- name: Configure FluxEdge Container Environment
  hosts: localhost
  gather_facts: yes

  # these are global vars that apply to more than just this deployment
  vars_files:
    - "{{ playbook_dir }}/../vars/global.yml"

  # deployment specific vars (apply only to this deployment)
  vars:
    dev_mode: true  # this keeps Kubernetes from failing when Ansible fails during development
    apt_packages:
      - nano
      - wget
      - iputils-ping
    conda_root: "/opt/miniconda"
    conda_env_name: "edge-ai"
    python_version: "3.10"
    conda_packages:
      - numpy
      - pandas
      - matplotlib
      - scikit-learn


  tasks:

    #### this section of code handles only tasks that are not handled by roles ####

    # Task to update the apt cache
    - name: Update apt cache
      apt:
        update_cache: yes
      changed_when: false

    - name: Debug apt_packages variable
      debug:
        var: apt_packages


  roles:

    #### this section of code utilizes roles as generic reusable objects, requires vars ####

    # install apt package list from vars
    - role: configure_apt_packages
      vars:
        configure_apt_packages_apt_packages: "{{ apt_packages }}"

    # install and configure Miniconda
    - role: configure_miniconda 
      vars:
        configure_miniconda_conda_root: "{{ conda_root }}"
        configure_miniconda_conda_env_name: "{{ conda_env_name }}"
        configure_miniconda_python_version: "{{ python_version }}"
        configure_miniconda_conda_packages: "{{ conda_packages }}"


    # # Task to install miniconda and configure env
    # - name: Configure miniconda and configure it
    #   include_role:
    #     name: role_configure_miniconda
    #   vars:
    #     conda_packages: conda_packages


    #### from this point down, specific dependancies or versions of packages required by Detectron2 are installed as roles

    # - name: Configure Jupyter Notebooks webserver and start it
    #   include_role:
    #     name: role_configure_jupyter

    # - name: Configure CUDA 12.4 for Detectron2
    #   include_role:
    #     name: role_configure_cuda
    #   vars:
    #     cuda_version: "12.4"
      
    # - name: Configure Pytorch for Detectron2
    #   include_role:
    #     name: role_configure_pytorch

    # - name: Configure opencv for Detectron2
    #   include_role:
    #     name: role_configure_opencv    

    # - name: Configure cython for Detectron2
    #   include_role:
    #     name: role_configure_cython        

    # - name: Configure pycoco tools for Detectron2
    #   include_role:
    #     name: role_configure_pycoco    

    # - name: Configure Detectron2
    #   include_role:
    #     name: role_configure_detectron2            